include old/includes/pre.pug
title chapo.chat emojis
include old/includes/header.pug

main
	h1 chapo.chat emojis
	noscript This page won't work without JavaScript.
	div#loading Loading emoji list...
	progress(max=1 value=0)#progress
	.search-container#search-container
		select#view-type
			option(value="icon") Icon grid
			option(value="grid") Icons &amp; names
		input(type="text" placeholder="Search..." autocomplete="off")#search.search
	#view

style.
	body {
		overflow-y: scroll;
	}

	.search-container {
		display: flex;
		justify-content: center;
		margin-bottom: 20px;
	}

	.view.icon {
		display: flex;
		flex-wrap: wrap;
		justify-content: center;
		align-items: start;
		gap: 8px;
		margin: 0px 42px;
	}

	.view.icon .emoji {
		position: relative;
		width: 64px;
		height: 64px;
		display: flex;
		justify-content: center;
		align-items: center;
		background: rgba(0, 0, 0, 0.3);
	}

	.view.icon .emoji .image {
		max-height: 100%;
		max-width: 100%;
	}

	.view.icon .emoji .name {
		position: absolute;
		bottom: 54px;
		padding: 8px;
		line-height: 1;
		background: #ddd;
		color: black;
		pointer-events: none;
		visibility: hidden;
		border-radius: 8px;
		box-shadow: 0px 3px 3px 0px rgba(0, 0, 0, 0.8);
		width: max-content;
	}

	.view.icon .emoji .name::after {
		position: absolute;
		content: "";
		display: block;
		width: 10px;
		height: 10px;
		transform: translate(-50%, 50%) rotate(45deg);
		background: #ddd;
		bottom: 0;
		left: 50%;
	}

	.view.icon .emoji:hover {
		z-index: 1;
	}

	.view.icon .emoji:hover .name {
		visibility: visible;
	}

	.view.grid {
		display: flex;
		flex-wrap: wrap;
		justify-content: center;
		align-items: start;
		gap: 8px;
		margin: 0px;
	}

	.view.grid .emoji {
		padding: 8px;
		width: 240px;
		height: 48px;
		display: flex;
		align-items: center;
		background: rgba(0, 0, 0, 0.3);
	}

	.view.grid .image-container {
		height: 48px;
		width: 48px;
		margin-right: 8px;
		display: grid;
		align-items: center;
		justify-items: center;
	}

	.view.grid .image {
		max-height: 48px;
		max-width: 48px;
		width: auto;
		height: auto;
	}

	.view.grid .name {
		height: 100%;
		display: flex;
		align-items: center;
		border-left: 1px solid #4f5359;
		padding-left: 8px;
	}

script.
	let requests = 0
	const e_progress = q("#progress")
	const e_loading = q("#loading")
	function updateLoading(current, max, concurrent) {
		e_loading.textContent = `Loading images... (${concurrent} concurrent, ${current}/${max})`
		e_progress.max = max
		e_progress.value = current
	}

	class Emoji extends ElemJS {
		constructor(name, webURL) {
			super("div")
			this.class("emoji")
			this.imageURL = webURL.replace("blob", "raw")
			this.name = name.replace(/\.\w+$/, "")
		}

		render(view) {
			if (view === "icon") {
				this.clearChildren()
				this.child(
					new ElemJS("img").class("image").direct("src", this.imageURL)
				).child(
					new ElemJS("span").class("name").text(`:${this.name}:`)
				)
			} else if (view === "grid") {
				this.clearChildren()
				this.child(
					new ElemJS("div").class("image-container").child(
						new ElemJS("img").class("image").direct("src", this.imageURL)
					)
				).child(
					new ElemJS("span").class("name").text(`:${this.name}:`)
				)
			}
		}
	}

	class View extends ElemJS {
		constructor() {
			super("div")
			this.element = q("#view")
			this.class("view")
			this.emojis = []
			this.setView(q("#view-type").value)
			this.search = ""

			q("#search").addEventListener("input", event => {
				this.setSearch(event.target.value)
			})

			q("#view-type").addEventListener("change", event => {
				this.setView(event.target.value)
			})
		}

		setSearch(search) {
			this.search = search.toLowerCase()
			for (const emoji of this.emojis) {
				if (emoji.name.toLowerCase().includes(this.search)) emoji.element.style.display = ""
				else emoji.element.style.display = "none"
			}
		}

		setView(view) {
			this.element.classList.remove(this.view)
			this.view = view
			this.class(this.view)
			this.render()
		}

		setEmojis(emojis) {
			this.emojis = emojis
			for (const emoji of this.emojis) {
				this.child(emoji)
			}
			this.render()
		}

		render() {
			for (const emoji of this.emojis) {
				emoji.render(this.view)
			}
		}
	}

	class SlowLoader {
		constructor(urls, max) {
			this.urls = urls
			this.max = max
			this.now = 0
			this.i = 0
			this.completed = 0
			this.listeners = []
			this.next()
		}

		addListener(l) {
			this.listeners.push(l)
			this.broadcast()
		}

		broadcast() {
			this.listeners.forEach(l => l(this.completed, this.urls.length, this.max))
		}

		next() {
			if (this.now < this.max && this.urls[this.i]) {
				this.now++
				const src = this.urls[this.i++]
				const image = new Image()
				image.addEventListener("load", () => {
					this.completed++
					this.now--
					this.broadcast()
					this.next()
				})
				image.addEventListener("error", () => {
					if (this.max > 1 && Math.random() < (-0.625 / (this.max-1) + 1)) this.max--
					this.urls.push(src)
					this.now--
					this.broadcast()
					this.next()
				})
				image.src = src
				this.next()
			}
		}
	}

	function getEmojiURL(emoji) {
		return emoji.download_url
		// return `https://www.chapo.chat/static/emojis/${emoji.name}`
	}

	const view = new View()
	q("#search-container").style.display = "none"
	fetch("/api/chapo/emojis").then(res => res.json()).catch(error => {
		q("#loading").textContent = "Request failed. Are you blocking outgoing cross-origin requests? Check your content blocker."
		throw error
	}).then(root => {
		/*const loader = new SlowLoader(root.map(getEmojiURL), 10)
		loader.addListener(updateLoading)
		loader.addListener((completed, max) => {
			if (completed === max) {*/
				q("#loading").style.display = "none"
				q("#progress").style.display = "none"
				q("#search-container").style.display = ""
				const emojis = root.map(e => new Emoji(e.name, getEmojiURL(e)))
				console.log(emojis)
				view.setEmojis(emojis)
		/*	}
		})*/
	})

include old/includes/end.pug
