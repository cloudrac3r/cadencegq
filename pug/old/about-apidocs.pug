include includes/pre
<title>API documentation</title>
style.
    pre {
        display: block;
        width: initial;
        color: #9cf;
    }
    .white {
        color: #ddd;
    }
    .curly {
        color: #ff5c1f;
    }
    .url {
        color: #ffb733;
    }
include includes/header
<h1>API documentation</h1>
<h2>Formatting</h2>
pre.
    - POST /api/fake/{fakeID}/info
        ^ This is the method and endpoint. Anything in curly braces { } should be substituted for a value.
        Values should not include the curly braces.
        Example: /api/fake/ab472c/info

        ? something : integer
        ? somethingElse : integer?
        ^ These are query string parameters, indicated by a ? character.
        The first word is the parameter name and the second word is the data type.
        If the data type ends with a ?, that parameter is optional.

        B something : JSON
            B content : string
        ^ This is the POST body, indicated by a B character.
        Often the body will be a JSON object. This object should be converted to a string for sending.
        The second line shows the contents of the JSON object.

        R Array/JSON
            R fakeID : integer
        ^ This is the return value, indicated by a R character.
        The notation "Array/JSON" indicates an array containing JSON objects.
        Similarly, "Array/integer" would indicate an array of integers.
        "204" indicates HTTP 204 No Response, and a successful operation.
<h2>Pastes</h2>
pre.
    - GET /api/pastes/{pasteID}
        R JSON
            R pasteID : integer
            R author : string
            R content : string
            R creationTime : integer
            R expiryTime : integer/null

        Get paste details and content from a pasteID.

    - GET /api/pastes/{pasteID}/raw
        R content : string

        Get raw paste content as plaintext from a pasteID.

    - POST /api/pastes
        B JSON
            B token : string
            B content : string

        R JSON
            R pasteID : integer

        Upload a new paste.
        The token is an account token. It will associate the paste with that account and make it editable by that account.
        You must supply an account token.

    - PATCH /api/pastes/{pasteID}
        B JSON
            B content : string
            B token : string

        R 204

        Edit an existing paste. An account token is required.
        Set content to an empty string to delete the paste.

    - GET /api/pastes
        ? preview : integer?

        R Array/JSON
            R pasteID : integer
            R author : string
            R content : string?
            R creationTime : integer
            R expiryTime : integer/null

        Get a list of existing pastes.
        If preview is provided and is less than 0, do not return the content of any pastes.
        Otherwise, if preview is less than 5000, return up to that many characters of content from every paste.
        Otherwise, if preview if more than 5000, return up to 5000 characters of content from every paste.
        Otherwise, if preview is not provided, return up to 400 characters of content from every paste.
<h2>Images</h2>
pre.
    - GET /api/images/{imageID}
        R image : binary

        Get an image. Content-Type header will be set.

    - GET /api/images/{imageID}/details
        R JSON
            R imageID : string
            R extension : string
            R author : string
            R creationTime : integer
            R expiryTime : integer?

        Get information about an image.

    - POST /api/images
        ? token : string

        B content : binary

        R JSON
            R imageID : string

        Upload an image.
        The token is an account token. It is required, but is not displayed publicly.

    - GET /api/images
        R Array/JSON
            R imageID : string
            R extension : string
            R author : string
            R creationTime : integer
            R expiryTime : integer?

        Get a list of details of existing images.
<h2>URLs/Links</h2>
pre.
    - GET /api/urls/{hash}
        R 303 redirect

        Go to a shortened URL.
        Browsers will be redirected automatically.
        For non-browsers, examine the "Location" header to find the destination.

    - GET /api/urls/{hash}/details
        R JSON
            R hash : string
            R author : string?
            R target : string
            R creationTime : integer
            R expiryTime : integer?

        Get information about an existing shortened URL.

    - POST /api/urls
        B JSON
            B token : string
            B target : string

        R JSON
            R hash : string

        Shorten a URL.
        The token is an account token. It will associate the URL with that account.
        You must supply an account token.

    - GET /api/urls
        R Array/JSON
            R hash : string
            R author : string?
            R target : string
            R creationTime : integer
            R expiryTime : integer?

        Return a list of existing shortened URLs and their details.
<h2>Accounts</h2>
pre.
    - POST /api/accounts
        B JSON
            B username : string
            B password : string

        R 204

        Create a new account with that username and password.
        Accounts created after 2019-11-28 are not allowed to upload any content. Contact me to request access.

    - PATCH /api/accounts
        B JSON
            B username : string
            B password : string
            B newPassword : string

        R 204

        Edit an account's password.
        The password property should contain the account's previous password.
        The newPassword property should contain the value that the password should be changed to.

    - POST /api/accounts/tokens
        B JSON
            B username : string
            B password : string

        R JSON
            R token : string
            R expires : integer

        Create a new account access token. This token is used to create pastes or links from that account.
        The token will expire and be unusable on the date specified in the expires property.
        You can create as many tokens as you like for a single account.

    - GET /api/accounts/tokens/{token}
        R JSON
            R username : string
            R expires : integer

        Get the username and expiry date of an existing account access token.

    - DELETE /api/accounts/tokens/{token}
        R 204

        Delete an existing account access token.
<h2>Error codes</h2>
pre.
    - 1
        Missing content ID
    - 2
        Bad content ID
    - 3
        Malformed JSON
    - 4
        Missing content
    - 5
        Bad content
    - 6
        Content too large (HTTP 413)
    - 7
        Duplicate action cannot be performed (HTTP 409)
    - 8
        Invalid or missing authentication details (HTTP 401)
    - 9
        Username in use
    - 10
        Content blocked by site filter for being illegal, obscene, or otherwise unpublishable (HTTP 403)
    - 11
        Valid authentication but insufficient privilege (HTTP 403)
    - 12
        Account not authorised to upload any content (HTTP 403)
script.
    document.querySelectorAll("pre").forEach(pre => {
        [
            [new RegExp("^(\\s*- [A-Z]+ /api/.*)$", "gm"), "url"],
            [new RegExp("/api/.*(\\{.*?\\})", "g"), "curly"],
            [new RegExp("^\\s+([BR?] .*)$", "gm"), "white"]
        ].forEach(r => {
            let match;
            while (match = r[0].exec(pre.innerHTML)) {
                console.log(match);
                let insert = '<span class="'+r[1]+'">'+match[1]+'</span>';
                pre.innerHTML = pre.innerHTML.slice(0, match.index+match[0].length-match[1].length)
                    +insert
                    +pre.innerHTML.slice(match.index+match[0].length);
                r[0].lastIndex = r[0].lastIndex + insert.length - match[1].length;
            }
        });
    });
include includes/end
